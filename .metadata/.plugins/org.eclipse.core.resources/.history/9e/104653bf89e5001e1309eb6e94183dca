package sec1;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Vector;

public class ServerBack extends Thread {
	Vector<ReceiveInfo> clientList = new Vector<ReceiveInfo>();	//클라이언트 쓰레드 목록
	List<String> nickNameList = new ArrayList<String>();	//클라이언트 대화명 목록
	ServerSocket serverSocket;
	Socket socket;
	private ChatServerGUI serverChatGUI;
	
	public void setGUI(ChatServerGUI serverChatGUI) {
		this.serverChatGUI = serverChatGUI;
	}
	
	public void startServer(int port) {
		Collections.synchronizedList(clientList);
		try {
			serverSocket = new ServerSocket(port);
			System.out.println("현재 IP주소 : ["+InetAddress.getLocalHost()+"], "+"Port 번호 :["+port+"]");
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	public void run() {
		try {
			nickNameList.add("Admin");
			while(true) {	//접속대기모드
				System.out.println("접속 대기중");
				socket = serverSocket.accept();
				System.out.println("["+socket.getInetAddress()+"]에서 접속하셨습니다.");
				ReceiveInfo receive = new ReceiveInfo(socket);
				clientList.add(receive);
			} 
		}catch (Exception e) {
				e.printStackTrace();
		}
	}
	
	
	class ReceiveInfo extends Thread{
		private DataInputStream in;
		private DataOutputStream out;
		String nickName;
		String massage;
		
		public ReceiveInfo(Socket socket) {
			try {
				out = new DataOutputStream(socket.getOutputStream());
				in = new DataInputStream(socket.getInputStream());
				nickName = in.readUTF();
				nickNameList.add(nickName);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		@Override
		public void run() {
			
		}
		
		
		
	}
}
